// Generated by CoffeeScript 1.3.3
(function() {
  var Chat, LobbyView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Chat = (function(_super) {

    __extends(Chat, _super);

    function Chat() {
      this.render = __bind(this.render, this);

      this.newMessage = __bind(this.newMessage, this);

      this.handleChat = __bind(this.handleChat, this);

      this.resetMessages = __bind(this.resetMessages, this);

      this.addMessage = __bind(this.addMessage, this);

      this.handleServerMessage = __bind(this.handleServerMessage, this);

      this.handleJoin = __bind(this.handleJoin, this);

      this.handleUser = __bind(this.handleUser, this);
      return Chat.__super__.constructor.apply(this, arguments);
    }

    Chat.prototype.collection = S.Collections.Messages;

    Chat.prototype.initialize = function() {
      var _this = this;
      this.communicator = this.options.communicator;
      this.messageTemplate = Handlebars.templates['lobbyMessage'];
      this.messagesTemplate = Handlebars.templates['lobbyMessages'];
      this.collection.bind('add', this.addMessage);
      this.collection.bind('reset', this.resetMessages);
      this.communicator.on('message:new', this.handleServerMessage);
      this.communicator.on('user', this.handleUser);
      this.communicator.on('joined', this.handleJoin, this, false);
      this.communicator.on('chat:load', this.handleChat);
      return KeyboardJS.bind.key('enter', this.newMessage, function() {
        return $('#chat textarea:focus').val('');
      });
    };

    Chat.prototype.handleUser = function(user) {
      return this.user = user;
    };

    Chat.prototype.handleJoin = function(channel) {
      console.log('[Chat] joined' + channel);
      return this.communicator.trigger("fetch:messages");
    };

    Chat.prototype.handleServerMessage = function(data) {
      var msg;
      msg = new S.Models.Message(data);
      return this.collection.add(msg);
    };

    Chat.prototype.addMessage = function(model) {
      var msg;
      msg = model.toJSON();
      console.log("[Chat] New message", msg);
      msg = this.messageTemplate(msg);
      $('#chat ul').append(msg);
      return $("#chat .nano").nanoScroller({
        scroll: 'bottom'
      });
    };

    Chat.prototype.resetMessages = function() {
      var html, msgs;
      msgs = this.collection.toJSON();
      console.log("[Chat] Reset", msgs);
      html = this.messagesTemplate({
        messages: msgs
      });
      $('#chat ul').html(html);
      return $("#chat .nano").nanoScroller({
        scroll: 'bottom'
      });
    };

    Chat.prototype.handleChat = function(messages) {
      var msg, msgs;
      console.log("[Lobby] chat ", messages);
      if ((messages.length != null) && messages.length > 0) {
        msgs = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = messages.length; _i < _len; _i++) {
            msg = messages[_i];
            _results.push((msg.author = msg.sender.name, msg.sender = msg.sender._id, msg));
          }
          return _results;
        })();
        return this.collection.reset(msgs);
      }
    };

    Chat.prototype.newMessage = function() {
      var author, date, hour, message, minute, msg, sender, textarea, time;
      textarea = $('#chat textarea:focus');
      if (textarea.length > 0) {
        author = this.user.name;
        message = textarea.val();
        sender = this.user._id;
        date = new Date();
        hour = date.getHours();
        minute = date.getMinutes();
        if (hour < 10) {
          hour = "0" + hour;
        }
        if (minute < 10) {
          minute = "0" + minute;
        }
        time = "" + hour + ":" + minute;
        textarea.val('');
        msg = new S.Models.Message({
          author: author,
          content: message,
          sender: sender,
          time: time,
          channel: this.communicator.channel
        });
        this.collection.add(msg);
        console.log("[Chat] new message", msg.toJSON());
        return this.communicator.trigger('message:add', msg.toJSON());
      }
    };

    Chat.prototype.render = function() {
      var msgs;
      msgs = this.messagesTemplate({
        messages: this.collection.toJSON()
      });
      $('#chat ul').html(msgs);
      return $("#chat .nano").nanoScroller();
    };

    return Chat;

  })(Backbone.View);

  window.S.Chat = Chat;

  LobbyView = (function(_super) {

    __extends(LobbyView, _super);

    function LobbyView() {
      this.render = __bind(this.render, this);

      this.newMessage = __bind(this.newMessage, this);

      this.handleUser = __bind(this.handleUser, this);

      this.handleServerMessage = __bind(this.handleServerMessage, this);

      this.handleNewGame = __bind(this.handleNewGame, this);

      this.handleChat = __bind(this.handleChat, this);

      this.handleFriends = __bind(this.handleFriends, this);

      this.addGame = __bind(this.addGame, this);

      this.resetMessages = __bind(this.resetMessages, this);

      this.addMessage = __bind(this.addMessage, this);
      return LobbyView.__super__.constructor.apply(this, arguments);
    }

    LobbyView.prototype.collection = S.Collections.Messages;

    LobbyView.prototype.initialize = function() {
      var _this = this;
      this.communicator = this.options.communicator;
      this.messageTemplate = Handlebars.templates['lobbyMessage'];
      this.messagesTemplate = Handlebars.templates['lobbyMessages'];
      this.collection.bind('add', this.addMessage);
      this.collection.bind('reset', this.resetMessages);
      this.games = new S.Collections.Messages;
      this.games.bind('add', this.addGame);
      this.communicator.on('message:new', this.handleServerMessage);
      this.communicator.on('user', this.handleUser);
      this.communicator.on('game:lobby:new', this.handleNewGame);
      this.communicator.on('game:lobby:change', this.handleGameChange);
      this.communicator.on('game:lobby:close', this.handleGameClose);
      this.communicator.on('friends:load', this.handleFriends);
      this.communicator.on('chat:load', this.handleChat);
      return KeyboardJS.bind.key('enter', this.newMessage, function() {
        return $('#chat textarea:focus').val('');
      });
    };

    LobbyView.prototype.addMessage = function(model) {
      var msg;
      msg = model.toJSON();
      msg = this.messageTemplate(msg);
      $('#chat ul').append(msg);
      return $("#chat .nano").nanoScroller({
        scroll: 'bottom'
      });
    };

    LobbyView.prototype.resetMessages = function() {
      var html, msgs;
      msgs = this.collection.toJSON();
      console.log("[Chat] Reset", msgs);
      html = this.messagesTemplate({
        messages: msgs
      });
      $('#chat ul').html(html);
      return $("#chat .nano").nanoScroller({
        scroll: 'bottom'
      });
    };

    LobbyView.prototype.addGame = function(model) {
      return console.log("Lobby: New Game");
    };

    LobbyView.prototype.handleFriends = function(friends) {
      var f, group, groups, html, i, m, maxScore, minScore, now, scale, scoreTemplate, _i, _j, _len;
      console.log("[Lobby] friends", friends);
      friends.push(this.user);
      friends = _.map(friends, function(o) {
        if (o.highscore != null) {
          return o;
        } else {
          o.highscore = 0;
          return o;
        }
      });
      friends = _.sortBy(friends, function(o) {
        return o.highscore;
      });
      maxScore = friends[0].highscore;
      if (maxScore < 1000) {
        maxScore = 1000;
      }
      minScore = 0;
      scale = (maxScore + minScore) / 10;
      now = maxScore;
      groups = [];
      group = 1;
      for (i = _i = 0; _i <= 10; i = ++_i) {
        groups.push({
          "class": i,
          users: []
        });
      }
      for (_j = 0, _len = friends.length; _j < _len; _j++) {
        f = friends[_j];
        f.firstname = f.name.split(' ')[0];
        if (f.highscore > now - scale) {
          if (groups[group].users.length < 3) {
            groups[group].users.push(f);
          }
        } else {
          m = Math.floor((now - f.highscore) / scale);
          now = now - m * scale;
          group += m;
          if (group > 10) {
            group = 10;
          }
          console.log(group);
          groups[group].users.push(f);
        }
      }
      groups = _.map(groups, function(group) {
        if (group.users.length > 3) {
          group.users = group.users.splice(0, 3);
        }
        return group;
      });
      scoreTemplate = Handlebars.templates.highscoreTicker;
      html = scoreTemplate({
        groups: groups
      });
      console.log(maxScore, groups);
      $(".ranking").html(html);
      return $(".userScore").html(maxScore);
    };

    LobbyView.prototype.handleChat = function(messages) {
      var msg, msgs;
      if ((messages.length != null) && messages.length > 0) {
        msgs = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = messages.length; _i < _len; _i++) {
            msg = messages[_i];
            _results.push((msg.author = msg.sender.name, msg.sender = msg.sender._id, msg));
          }
          return _results;
        })();
        return this.collection.reset(msgs);
      }
    };

    LobbyView.prototype.handleNewGame = function(data) {
      var game;
      game = new S.Models.Game(data);
      return this.games.add(game);
    };

    LobbyView.prototype.handleServerMessage = function(data) {
      var msg;
      msg = new S.Models.Message(data);
      return this.collection.add(msg);
    };

    LobbyView.prototype.handleUser = function(user) {
      this.user = user;
      this.communicator.trigger("fetch:friends", user);
      return this.communicator.trigger("fetch:messages", 'lobby');
    };

    LobbyView.prototype.newMessage = function() {
      var author, date, hour, message, minute, msg, sender, textarea, time;
      textarea = $('#chat textarea:focus');
      if (textarea.length > 0) {
        author = this.user.name;
        message = textarea.val();
        sender = this.user._id;
        date = new Date();
        hour = date.getHours();
        minute = date.getMinutes();
        if (hour < 10) {
          hour = "0" + hour;
        }
        if (minute < 10) {
          minute = "0" + minute;
        }
        time = "" + hour + ":" + minute;
        textarea.val('');
        msg = new S.Models.Message({
          author: author,
          content: message,
          sender: sender,
          time: time,
          channel: 'lobby'
        });
        this.collection.add(msg);
        return this.communicator.trigger('message:add', msg.toJSON());
      }
    };

    LobbyView.prototype.render = function() {
      var msgs;
      msgs = this.messagesTemplate({
        messages: this.collection.toJSON()
      });
      $('#chat ul').html(msgs);
      return $("#chat .nano").nanoScroller();
    };

    return LobbyView;

  })(Backbone.View);

  window.S.Views.LobbyView = LobbyView;

}).call(this);
